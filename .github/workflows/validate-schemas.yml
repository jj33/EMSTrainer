name: Validate schemas & examples

on:
  pull_request:
    branches: [ "dev" ]
    paths:
      - "schemas/**"
      - "examples/**"
      - "prompts/**"
      - "specs/**"
  push:
    branches: [ "dev" ]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jsonschema==4.22.0

      - name: Validate examples against schemas
        run: |
          python - << 'PY'
          import json, sys, pathlib
          from jsonschema import Draft202012Validator

          root = pathlib.Path(".")
          s_scenario = json.loads((root/"schemas"/"scenario.schema.json").read_text())
          s_submission = json.loads((root/"schemas"/"submission.schema.json").read_text())
          s_rubric = json.loads((root/"schemas"/"rubric.schema.json").read_text())

          def validate_file(path, schema):
              data = json.loads(path.read_text())
              validator = Draft202012Validator(schema)
              errs = sorted(validator.iter_errors(data), key=lambda e: e.path)
              return [f"{path}: {e.message}" for e in errs]

          errors = []
          for p in root.rglob("examples/**/scenario.json"):
              errors += validate_file(p, s_scenario)
          for p in root.rglob("examples/**/submission.json"):
              errors += validate_file(p, s_submission)
          for p in root.rglob("prompts/Instructor/Rubrics/*.json"):
              errors += validate_file(p, s_rubric)

          if errors:
              print("\\n".join(errors))
              sys.exit(1)
          else:
              print("All example files conform to schemas.")
          PY

