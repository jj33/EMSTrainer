name: JSON Schema Validation

on:
  pull_request:
    branches: [ dev, main ]
    paths:
      - '**/*.json'
      - '.github/workflows/validate-schemas.yml'
  push:
    branches:
      - dev
      - main
      - 'feat/**'
      - 'fix/**'
      - 'chore/**'
    paths:
      - '**/*.json'
      - '.github/workflows/validate-schemas.yml'

jobs:
  validate-json:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show event/branch context
        run: |
          echo "event_name=${{ github.event_name }}"
          echo "ref=${{ github.ref }}"
          echo "base_ref=${{ github.base_ref }}"
          echo "head_ref=${{ github.head_ref }}"
          echo "actor=${{ github.actor }}"
          echo "Listing schema and scenario directories (if present):"
          ls -al assets/schema || true
          ls -al assets/scenarios || true
          ls -al assets || true

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 'node'  # latest stable on the runner

      - name: Install Ajv CLI
        run: npm i -g ajv-cli@5

      # ----------------------------
      # Instructor scenarios (schema-conformant)
      # Only run if both the schema and one or more *_instructor.json files exist
      # ----------------------------
      - name: Validate instructor scenarios
        if: ${{ hashFiles('assets/schema/instructor_scenario.schema.json') != '' && hashFiles('assets/scenarios/*_instructor.json') != '' }}
        run: |
          echo "Validating instructor scenarios against assets/schema/instructor_scenario.schema.json"
          ajv validate --spec=draft2020 \
            -s assets/schema/instructor_scenario.schema.json \
            -d "assets/scenarios/*_instructor.json"

      # ----------------------------
      # Partner names (strict format)
      # Only run if both the schema and the data file exist
      # ----------------------------
      - name: Validate partner names
        if: ${{ hashFiles('assets/schema/partner_names.schema.json') != '' && hashFiles('assets/emstrainer_partner_names.json') != '' }}
        run: |
          echo "Validating assets/emstrainer_partner_names.json against assets/schema/partner_names.schema.json"
          ajv validate --spec=draft2020 \
            -s assets/schema/partner_names.schema.json \
            -d assets/emstrainer_partner_names.json

      # ----------------------------
      # Student submissions (if you collect them in-repo)
      # Only run if both the schema and any submission files exist
      # ----------------------------
      - name: Validate student submissions
        if: ${{ hashFiles('assets/schema/student_submission.schema.json') != '' && hashFiles('submissions/**/*.json') != '' }}
        run: |
          echo "Validating submissions/**/*.json against assets/schema/student_submission.schema.json"
          ajv validate --spec=draft2020 \
            -s assets/schema/student_submission.schema.json \
            -d "submissions/**/*.json"

      # ----------------------------
      # Syntax-only check for student-run JSON (no schema yet)
      # ----------------------------
      - name: Syntax check - student-run scenario(s)
        run: |
          if [ -f code_blackout_scenario.json ]; then
            python - <<'PY'
import json
with open("code_blackout_scenario.json", "r", encoding="utf-8") as f:
    json.load(f)
print("code_blackout_scenario.json syntax OK")
PY
          else
            echo "No top-level student-run scenario file found."
          fi

